---
- name: Create libvirt network
  tags: install
  become: true
  block:

    - name: Set default libvirt network typee
      set_fact:
        libvirt_net_mode: "nat"


    - name: Configure L2 connectivity
      block:

        - name: Configure bridge IP
          set_fact:
            libvirt_net_br_ip: "{{ libvirt_net_subnet24 | default('192.168.126') }}.1"
          when: (libvirt_net_br_ip is not defined)


        - name: Create bridge
          shell: |
            IFACE=$(nmcli con show '{{ kvm_public_interface }}' | grep connection.interface-name | awk '{print $2}')
            nmcli con add ifname {{ metadata.name }} type bridge con-name {{ metadata.name }} ip4 {{ libvirt_net_br_ip }}/24
            nmcli con add type bridge-slave ifname $IFACE master {{ metadata.name }} con-name slave-{{ metadata.name }}
            nmcli con modify {{ metadata.name }} bridge.stp no
            nmcli con up {{ metadata.name }}
            systemctl restart NetworkManager.service

        - name: Move interface to libvirt zone in firewalld
          ignore_errors: yes
          shell: |
            IFACE=$(nmcli con show '{{ kvm_public_interface }}' | grep connection.interface-name | awk '{print $2}')
            ZONE_EXT=$(firewall-cmd --list-all-zones | grep -B 3 $IFACE | head -n 1 | awk '{print $1}')
            firewall-cmd --permanent --zone=$ZONE_EXT --remove-interface={{ metadata.name }}
            firewall-cmd --permanent --zone=libvirt --add-interface={{ metadata.name }}
            firewall-cmd --reload


        - name: Allow forwarding
          ignore_errors: yes
          shell: |
            IFACE=$(nmcli con show '{{ kvm_public_interface }}' | grep connection.interface-name | awk '{print $2}')
            firewall-cmd --direct --permanent --add-rule ipv4 nat POSTROUTING 0 -o $IFACE  -j MASQUERADE
            firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i {{ metadata.name }} -o $IFACE -j ACCEPT
            firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i $IFACE -o {{ metadata.name }} -j ACCEPT
            systemctl restart firewalld

        - name: Set libvirt network type to bridge
          set_fact:
            libvirt_net_mode: "bridge"

      when: (libvirt_net_l2 is defined) and (libvirt_net_l2  == "true")





    - name: Define primary network
      include: create-net.yml
      vars:
        network_name: "{{ metadata.name }}"
        network_sub24: "{{ libvirt_net_subnet24 | default('192.168.126') }}"

    - name: Configure DNS external servers
      shell: nmcli con mod "{{ kvm_public_interface }}" ipv4.dns "127.0.0.1 {{ kvm_ext_dns }}"

    - name: Enable and Start libvirtd
      systemd:
        name: NetworkManager
        state: restarted
        enabled: yes





- name: Create VMs
  tags: install
  become: true
  block:

    - name: Create bootstrap
      include: create-vm.yml
      vars:
        vm_instance_name: "{{ metadata.name }}-bootstrap"
        vm_network: "{{ metadata.name }}"
        vm_mac_address: "52:54:60:11:11:11"
        vm_vcpu: "4"
        vm_special_cpu: ""
        vm_memory_size: "16"
        vm_memory_unit: "GiB"
        vm_root_disk_size: "{{ 120 }}"



    - name: Create master nodes
      include: create-vm.yml
      vars:
        vm_instance_name: "{{ metadata.name }}-master-{{ item }}"
        vm_network: "{{ metadata.name }}"
        vm_mac_address: "52:54:60:00:00:{{ '%02x' % (10 + item|int) }}"
        vm_vcpu: "{{ ocp_master_cpu }}"
        vm_special_cpu: "<cpu mode='host-passthrough'></cpu>"
        vm_memory_size: "{{ ocp_master_memory }}"
        vm_memory_unit: "{{ master_memory_unit | default('GiB') }}"
        vm_root_disk_size: "{{ ocp_master_disk }}"
      with_sequence: start=0 end="{{ controlPlane.replicas|int - 1 }}" stride=1




    - name: Create worker nodes
      ignore_errors: yes
      include: create-vm.yml
      vars:
        vm_instance_name: "{{ metadata.name }}-worker-{{ item }}"
        vm_network: "{{ metadata.name }}"
        vm_mac_address: "52:54:60:00:01:{{ '%02x' % (10 + item|int) }}"
        vm_vcpu: "{{ ocp_worker_cpu }}"
        vm_special_cpu: "<cpu mode='host-passthrough'></cpu>"
        vm_memory_size: "{{ ocp_worker_memory }}"
        vm_memory_unit: "{{ worker_memory_unit | default('GiB') }}"
        vm_root_disk_size: "{{ ocp_worker_disk }}"
      with_sequence: start=0 end="{{ compute.0.replicas|int - 1 }}" stride=1




- name: Destroy VMs
  become: true
  tags: remove
  block:

    - name: Stop Workers
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-worker-{{ item }}"
        state: destroyed
      with_sequence: start=0 end="{{ compute.0.replicas|int - 1 }}" stride=1

    - name: Delete Workers
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-worker-{{ item }}"
        command: undefine
      with_sequence: start=0 end="{{ compute.0.replicas|int - 1 }}" stride=1

    - name: Stop Masters
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-master-{{ item }}"
        state: destroyed
      with_sequence: start=0 end="{{ controlPlane.replicas|int - 1 }}" stride=1

    - name: Delete Masters
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-master-{{ item }}"
        command: undefine
      with_sequence: start=0 end="{{ controlPlane.replicas|int - 1 }}" stride=1

    - name: Stop {{ metadata.name }}-bootstrap
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-bootstrap"
        state: destroyed

    - name: Delete Bootstrap
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-bootstrap"
        command: undefine


    - name: Delete Disks
      shell: "rm -rf  {{ kvm_path_vms | default('/var/lib/libvirt/vms') }}/{{ metadata.name }}*"


- name: Destroy Libvirt Networks
  become: true
  tags: remove
  block:


    - name: Destroy L2 connectivity
      block:
        - name: Delete L2 bridge
          ignore_errors: yes
          shell: |
            IFACE=$(nmcli con show '{{ kvm_public_interface }}' | grep connection.interface-name | awk '{print $2}')
            nmcli con delete {{ metadata.name }} slave-{{ metadata.name }}
            systemctl restart NetworkManager.service

        - name: Set libvirt network type to bridge
          set_fact:
            libvirt_net_mode: "bridge"

      when: (libvirt_net_l2 is defined) and (libvirt_net_l2  == "true")



    - name: Delete primary network {{ metadata.name }}
      virt_net:
        state: absent
        name: "{{ metadata.name }}"
