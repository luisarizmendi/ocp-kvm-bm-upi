---

- name: Finish OCP deployment
  become: true
  when: (ocp_deploy is not defined) or (ocp_deploy  != "false")
  tags: install
  block:


    - name: Start {{ metadata.name }}-bootstrap
      virt: 
        name: "{{ metadata.name }}-bootstrap"
        state: running

    - name: Start Masters
      virt: 
        name: "{{ metadata.name }}-master-{{ item }}"
        state: running
      with_sequence: start=0 end="{{ controlPlane.replicas|int - 1 }}" stride=1

    - name: Start Workers
      virt: 
        name: "{{ metadata.name }}-worker-{{ item }}"
        state: running
      with_sequence: start=0 end="{{ compute.0.replicas|int - 1 }}" stride=1


    - name: Fix  Single Master BUG (https://bugzilla.redhat.com/show_bug.cgi?id=1805034)
      shell: |
        failing  > /dev/null 2>&1
        while [ $? -ne 0 ]
        do
          #touch /tmp/attempts ; echo "Attempt to patch" >> /tmp/attempts
          sleep 15
          oc --kubeconfig {{ ocp_install_path | default('~/ocp') }}/install/auth/kubeconfig patch etcd cluster -p='{"spec": {"unsupportedConfigOverrides": {"useUnsupportedUnsafeNonHANonProductionUnstableEtcd": true}}}' --type=merge
        done
      when: controlPlane.replicas == 1

    - name: Waiting bootstrap to complete
      command: |
        /usr/local/bin/openshift-install wait-for bootstrap-complete --dir {{ ocp_install_path | default('~/ocp') }}/install --log-level debug
      register: bootstrap_status
      retries: 60
      delay: 60
      until: bootstrap_status.rc == 0


    - pause:
        minutes: 4

    - name: Copy kubeconfig for admin
      shell: "mkdir ~/.kube ; cp {{ ocp_install_path | default('~/ocp') }}/install/auth/kubeconfig ~/.kube/config "


    - name: Approving the CSRs
      shell: "for i in $(/usr/local/bin/oc get csr -o name  --all-namespaces); do  /usr/local/bin/oc adm certificate approve $i ; /usr/local/bin/oc adm certificate approve $i ;done"

    - pause:
        minutes: 4

    - name: Approving the CSRs
      shell: "for i in $(/usr/local/bin/oc get csr -o name  --all-namespaces); do  /usr/local/bin/oc adm certificate approve $i ; /usr/local/bin/oc adm certificate approve $i ;done"

    - name: Waiting OCP install to complete
      command: "/usr/local/bin/openshift-install wait-for install-complete --dir {{ ocp_install_path | default('~/ocp') }}/install --log-level debug"
      register: bootstrap_status
      retries: 60
      delay: 120
      until: bootstrap_status.rc == 0


    - name: Stop {{ metadata.name }}-bootstrap
      ignore_errors: yes
      virt: 
        name: "{{ metadata.name }}-bootstrap"
        state: destroyed

    - name: Delete Bootstrap
      ignore_errors: yes
      virt:
        name: "{{ metadata.name }}-bootstrap"
        command: undefine



- name: OpenShift Post-Install
  when: (ocp_postdeploy is not defined) or (ocp_postdeploy  != "false")
  tags: install
  block:

    - name: Trust locally Ingress default CA
      shell: |
        while [[ $(oc -n openshift-ingress get secret/router-certs-default | grep router-certs-default  > /dev/null ; echo $?) != "0" ]]; do echo "Waiting for router-certs-default object" && sleep 10; done
        oc -n openshift-ingress extract secret/router-certs-default
        sudo cp tls.crt /etc/pki/ca-trust/source/anchors/ingress-cacert.pem
        sudo chown root:root /etc/pki/ca-trust/source/anchors/ingress-cacert.pem
        sudo chmod 0644 /etc/pki/ca-trust/source/anchors/ingress-cacert.pem
        sudo update-ca-trust extract


    - name: Configure Autocompletion
      shell: "oc completion bash > oc_bash_completion   ;  sudo cp oc_bash_completion /etc/bash_completion.d/ ; yum install -y bash-completion"



    - name: Create post-installation directory
      file:
        path: "{{ ocp_install_path | default('~/ocp')  }}/post-install"
        state: directory


    - name: Copy post-install scripts
      copy:
        src: "ansible/files/post-install-scripts/"
        dest: "{{ ocp_install_path | default('~/ocp')  }}/post-install/"



    - name: Configure LB IP on post-scripts
      shell: |
        sed -i 's/.*NFS_SERVER.*/NFS_SERVER={{ libvirt_net_subnet24 | default('192.168.126') }}.1/'  {{ ocp_install_path | default('~/ocp')  }}/post-install/nfs-registry/env
        sed -i 's/.*NFS_SERVER.*/NFS_SERVER={{ libvirt_net_subnet24 | default('192.168.126') }}.1/'  {{ ocp_install_path | default('~/ocp')  }}/post-install/nfs-autoprovisioner/env


    - name: Configure Registry Storage (NFS)
      shell: "cd {{ ocp_install_path | default('~/ocp')  }}/post-install/nfs-registry/  ; chmod +x run.sh ; ./run.sh "
      when:  (nfs_storage is not defined) or (nfs_storage  != "false")


    - name: Configure Registry Storage (Ephemeral)
      shell: |
        oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
      when: (nfs_storage is defined) and (nfs_storage  == "false")

    - name: Configure NFS Storage autoprovisioner (not supported)
      shell: "cd {{ ocp_install_path | default('~/ocp')  }}/post-install/nfs-autoprovisioner/  ; chmod +x run.sh ; ./run.sh "
      when: (nfs_storage is not defined) or (nfs_storage  != "false")

    - name: Configure Local users
      shell: "export CLUSTERADMIN_PASSWORD='{{ ocp_clusteradmin_password }}' ; export USERS_PASSWORD='{{ ocp_users_password }}'; cd {{ ocp_install_path | default('~/ocp')  }}/post-install/authentication/  ; chmod +x run.sh ; ./run.sh "
      when: (ocp_create_users is not defined) or (ocp_create_users  != "false")






- name: Access information
  become: true
  when: (ocp_deploy is not defined) or (ocp_deploy  != "false")
  tags: install
  ignore_errors: yes
  block:
    - name: Get Web Console URL
      shell: "oc get route -n openshift-console | grep https | awk '{print $2}' "
      register: webconsoleurl

    - name: Get kubeadmin password
      shell: "tail {{ ocp_install_path | default('~/ocp')  }}/install/.openshift_install.log | grep password: | awk -F 'password: ' '{print  substr($2, 1, length($2)-1)}'"
      register: kubeadminpass

    - name: OpenShift Web Console access
      debug:
        msg:
          - "                                                                                                        "
          - "                                                                                                        "
          - "   ***********************************************************************************************      "
          - "                                         WEB CONSOLE ACCESS                                             "
          - "   ***********************************************************************************************      "
          - "                                                                                                        "
          - "   https://{{ webconsoleurl.stdout }}      "
          - "                                                                                                        "
          - "                                                                                                        "
          - "   Username: kubeadmin     Password: {{ kubeadminpass.stdout  }}                                            "
          - "                                                                                                        "
          - "   ***********************************************************************************************      "
      when: (ocp_create_users is defined) and (ocp_create_users  == "false")

    - name: OpenShift Web Console access
      debug:
        msg:
          - "                                                                                                        "
          - "                                                                                                        "
          - "   ***********************************************************************************************      "
          - "                                         WEB CONSOLE ACCESS                                             "
          - "   ***********************************************************************************************      "
          - "                                                                                                        "
          - "   https://{{ webconsoleurl.stdout }}     "
          - "                                                                                                        "
          - "                                                                                                        "
          - "   htpasswd_provider - Cluster Admin         Username: clusteradmin  Password: {{ ocp_clusteradmin_password }} "
          - "   htpasswd_provider - Cluster Readonly      Username: viewuser      Password: {{ ocp_users_password }} "
          - "   htpasswd_provider - Regular User (1-25)   Username: userXX        Password: {{ ocp_users_password }} "
          - "   htpasswd_provider - Cluster Admin         Username: clusteradmin  Password: {{ ocp_users_password }} "
          - "   htpasswd_provider - Cluster Readonly      Username: viewuser      Password: {{ ocp_users_password }} "
          - "   htpasswd_provider - Regular User (1-25)   Username: userXX        Password: {{ ocp_users_password }} "
          - "   kube:admin        - system:admin          Username: kubeadmin     Password: {{ kubeadminpass.stdout  }}  "
          - "                                                                                                        "
          - "   ***********************************************************************************************      "
      when: (ocp_create_users is not defined) or (ocp_create_users  != "false")